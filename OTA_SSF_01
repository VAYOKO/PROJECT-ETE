
#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include<DHT.h>
#define DHTPIN 12 // what pin we're connected to
#define DHTTYPE DHT22   // DHT 22  (AM2302)
DHT dht(DHTPIN, DHTTYPE); //// Initialize DHT sensor for normal 16mhz Arduino
//Variables
#define ldr A0
#define stled 16
#define stled1 0
int chk;
float h;  //Stores humidity value
float t; //Stores temperature value
WidgetTerminal terminal(V30);
WidgetLED led1(V1);
WidgetLED led2(V2);
WidgetLED led3(V3);

#ifndef STASSIDq2
#define STASSID ""
#define STAPSK  ""
#endif
char ssid[] = "";
char pass[] = "";
char auth[] = "";
 

const char* SSID1 = STASSID;
const char* password = STAPSK;
void setup() {
  pinMode(ldr,INPUT);
    pinMode(stled1,OUTPUT);
        pinMode(stled,OUTPUT);
   Blynk.begin(auth, ssid, pass);
Serial.begin(9600);
  dht.begin();
  Serial.begin(115200);
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(SSID1, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  // ArduinoOTA.setHostname("myesp8266");

  // No authentication by default
  // ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_FS
      type = "filesystem";
    }

    // NOTE: if updating FS this would be the place to unmount FS using FS.end()
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}
void loop() {
  if (Blynk.connected()) {
    Blynk.run();
int ldr1 = analogRead(ldr);
if (analogRead(ldr1<100)){
  digitalWrite(stled1,HIGH);
  delay(100);
  led1.on();
  digitalWrite(stled1,LOW);
  delay(3000);
   led1.off();
}
      Blynk.virtualWrite(V6, ldr1);
   if (isnan(h) || isnan(t)) {
terminal.println("[9600]ERROR Reading DHT!!");
terminal.println("----------------------");
Blynk.notify("ERROR Reading DHT!!"); 
    }
    if(t>= 40){
terminal.println("[9600]DHT REPORT ALART OVER 40*C");
terminal.println("----------------------");
Blynk.notify("[9600]DHT REPORT ALART OVER 40*C"); 
    }
    h = dht.readHumidity();
    t = dht.readTemperature();
    //Print temp and humidity values to serial monitor
    Serial.print("Humidity: ");
    Serial.print(h);

ArduinoOTA.handle();
    Blynk.virtualWrite(V4, h);
    Serial.print(" %, Temp: ");

    Blynk.virtualWrite(V5, t);

    Serial.print(t);
    Serial.println(" Celsius");
  }
}
